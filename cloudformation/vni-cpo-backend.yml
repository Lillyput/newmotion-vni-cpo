Parameters:
  Project: 
    Type: String
    Default: vni-backend
  Environment:
    Type: String

##CHARGING POINTS' BACKEND SERVICE PARAMETERS
  ServerNum:
    Type: String
    Default: 3
  BackendPort:
    Type: String
    Default: 80
  BackendMem:
    Type: String
    Default: 1024
  BackendCPU:
    Type: String
    Default: 512
  HealthCheckPort:
    Type: String
    Default: 5000
  BackendWhitelistIp:
    Type: String
    Default: 0.0.0.0/0

###THIRD PARTY HUB BACKEND SERVICE PARAMETERS
  ThirdPartyServerNum:
    Type: String
    Default: 1
  ThirdPartyBackendPort:
    Type: String
    Default: 80
  ThirdPartyBackendMem:
    Type: String
    Default: 512
  ThirdPartyBackendCPU:
    Type: String
    Default: 256
  ThirdPartyWhitelistIp:
    Type: String

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}
  CloudWatchGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Project}-${Environment}
      RetentionInDays: 365

##CHARGING POINTS' BACKEND SERVICE
  BackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${Project}-charging-point-${Environment}
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: LBListener 
    Properties:
      ServiceName: !Sub ${Project}-charging-point-${Environment}
      Cluster: !Ref Cluster
      DesiredCount: !Ref ServerNum
      LaunchType: FARGATE
      TaskDefinition: !Ref BackendTaskDefinition
      LoadBalancers:
        - ContainerName: container
          ContainerPort: !Ref BackendPort
          TargetGroupArn: !Ref BackendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
          - !Ref BackendServiceSG
          Subnets:
          - !ImportValue backend-vpc-private-sn-1
          - !ImportValue backend-vpc-private-sn-2
          - !ImportValue backend-vpc-private-sn-3

  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub ${Project}-cp-${Environment}
      SecurityGroups: 
        - !Ref BackendLBSG
      Subnets: 
      - !ImportValue backend-vpc-public-sn-1
      - !ImportValue backend-vpc-public-sn-2
      - !ImportValue backend-vpc-public-sn-3
      Type: application
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: !Ref BackendPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue backend-vpc-vpc
      HealthCheckPath: /health_check
      HealthCheckPort: !Ref HealthCheckPort
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BackendTargetGroup
          Type: forward
      Certificates:
      - CertificateArn: 'arn:aws:acm:eu-west-1:018160963332:certificate/4a913415-f079-48bb-acf6-3efa731087da'
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 443
      Protocol: HTTPS
  
  BackendLBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for backend load balancer
      SecurityGroupIngress:
        - IpProtocol: TCP
          ToPort: 443
          FromPort: 443
          CidrIp: !Ref BackendWhitelistIp
          Description: my IP
      VpcId: !ImportValue backend-vpc-vpc
  BackendServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for backend service
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: !Ref BackendPort
          FromPort: !Ref BackendPort
          SourceSecurityGroupId: !Ref BackendLBSG
          Description: backend load balancer
        - IpProtocol: tcp
          ToPort: !Ref HealthCheckPort
          FromPort: !Ref HealthCheckPort
          SourceSecurityGroupId: !Ref BackendLBSG
          Description: backend load balancer healthcheck
      VpcId: !ImportValue backend-vpc-vpc

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Project}-charging-point-${Environment}
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Cpu: !Ref BackendCPU
      Memory: !Ref BackendMem
      ContainerDefinitions:
        - Name: container
          Essential: true
          PortMappings:
          - ContainerPort: !Ref BackendPort
            HostPort: !Ref BackendPort
          - ContainerPort: !Ref HealthCheckPort
            HostPort: !Ref HealthCheckPort
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackendRepository}:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Ref Environment
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com


##THIRD PARTY HUB BACKEND SERVICE

  ThirdPartyBackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${Project}-third-party-${Environment}
  ThirdPartyBackendService:
    Type: AWS::ECS::Service
    DependsOn: ThirdPartyLBListener 
    Properties:
      ServiceName: !Sub ${Project}-third-party-${Environment}
      Cluster: !Ref Cluster
      DesiredCount: !Ref ThirdPartyServerNum
      LaunchType: FARGATE
      TaskDefinition: !Ref ThirdPartyBackendTaskDefinition
      LoadBalancers:
        - ContainerName: container
          ContainerPort: !Ref ThirdPartyBackendPort
          TargetGroupArn: !Ref ThirdPartyBackendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
          - !Ref ThirdPartyBackendServiceSG
          Subnets:
          - !ImportValue backend-vpc-private-sn-1
          - !ImportValue backend-vpc-private-sn-2
          - !ImportValue backend-vpc-private-sn-3

  ThirdPartyBackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub ${Project}-third-party-${Environment}
      SecurityGroups: 
        - !Ref ThirdPartyBackendLBSG
      Subnets: 
      - !ImportValue backend-vpc-public-sn-1
      - !ImportValue backend-vpc-public-sn-2
      - !ImportValue backend-vpc-public-sn-3
      Type: application
  ThirdPartyBackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: !Ref ThirdPartyBackendPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue backend-vpc-vpc
      HealthCheckPath: /health_check
      HealthCheckPort: !Ref ThirdPartyBackendPort
  ThirdPartyLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ThirdPartyBackendTargetGroup
          Type: forward
      Certificates:
      - CertificateArn: 'arn:aws:acm:eu-west-1:018160963332:certificate/4a913415-f079-48bb-acf6-3efa731087da'
      LoadBalancerArn: !Ref ThirdPartyBackendLoadBalancer
      Port: 443
      Protocol: HTTPS
  
  ThirdPartyBackendLBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for third party backend load balancer
      SecurityGroupIngress:
        - IpProtocol: TCP
          ToPort: 443
          FromPort: 443
          CidrIp: !Ref ThirdPartyWhitelistIp
          Description: my IP
      VpcId: !ImportValue backend-vpc-vpc
  ThirdPartyBackendServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for third party backend service
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: !Ref ThirdPartyBackendPort
          FromPort: !Ref ThirdPartyBackendPort
          SourceSecurityGroupId: !Ref ThirdPartyBackendLBSG
          Description: third party backend load balancer
      VpcId: !ImportValue backend-vpc-vpc

  ThirdPartyBackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Project}-third-party-backend-${Environment}
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Cpu: !Ref ThirdPartyBackendCPU
      Memory: !Ref ThirdPartyBackendMem
      ContainerDefinitions:
        - Name: container
          Essential: true
          PortMappings:
          - ContainerPort: !Ref ThirdPartyBackendPort
            HostPort: !Ref ThirdPartyBackendPort
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ThirdPartyBackendRepository}:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Ref Environment
Outputs:
  ClusterName:
    Description: Name of ECS cluster
    Value: !Ref Cluster
    Export:
      Name: !Sub '${AWS::StackName}--cluster-name'